# track_file　を firstlabel に変更
# 参考フォーマット
# https://fastlabel.notion.site/19ea9ec20a6f48b29fa309cc8c00d2b8#527d691d8c5d45c39e82511c7078355e

import json
import numpy as np

BASE_X = 3885.356
BASE_Y = 812.703


base_format = {        
        "name": "new_half_1100_1130_ts2x_pallet.mp4",
        "status": "registered",
        "externalStatus": "registered",
        "width": 3932,
        "height": 2312,
        "fps": 30,
        "frameCount": 4498,
        "duration": 149.9333333333,
        "secondsToAnnotate": 0,
        "annotations": [
            {
                "type": "bbox",
                "title": "worker",
                "value": "worker",
                "color": "#D10069",
                "attributes": [],
                "points": {
                    "1": {           # number of frame
                        "value": [
                            271.63,  # top-left x point
                            130.96,  # top-left y point
                            755.36,  # bottom-right x point
                            470.29   # bottom-right y point
                        ],
                    }
                }
            }
        ],
        "tags": [],
    }

def load_json_file(file):
    with open(file, 'r') as f:
        workers = json.load(f)

    return workers

from colorsys import hls_to_rgb

def get_distinct_colors(n):
    colors = []
    for i in np.arange(0., 360., 360. / n):
        h = i / 360.
        l = (50 + np.random.rand() * 10) / 100.
        s = (90 + np.random.rand() * 10) / 100.
        colors.append(hls_to_rgb(h, l, s))

    return colors



subj_colors = get_distinct_colors(50)

def scolor(n):
    try:
        num  = int(n)
    except Exception as e:
        print("SColor_Error[", n, "]",e)
        return "#800080"

    return subj_colors[num % 50]

def convert_fastlabel(track_json):

    annon = []

# ここに各トラックをつける
    track_ids = {}
# すでに subj_id がついているのはこっち
    subj_ids ={}

    for frame in track_json:
        if frame['frame_id'] >= 4500*2: #　まずは前半30分
            break
        if frame['frame_id'] % 2 == 1:
            continue
        frame_id = frame['frame_id'] // 2
        print("Frame_id: ", frame_id)
        for track in frame['tracks']:
            tid = track['track_id']
            if 'subj_id' in track and not(track['subj_id'].startswith("track")):
                ssid = track['subj_id']
                if ssid == "None":
                    continue
                if True:
                    sid = ssid

                    if not(sid in subj_ids):
                        subj_ids[sid] = {}

                    subj_ids[sid][str(frame_id+1)]={
                        "value":[
                            track['bbox'][0]-BASE_X,
                            track['bbox'][1]-BASE_Y,
                            track['bbox'][2]+track['bbox'][0]-BASE_X,
                            track['bbox'][3]+track['bbox'][1]-BASE_Y
                        ],
                        "autogenerated": False
                    }
#                except Exception as e:
#                    print("Error: Converting", e, ssid)
            else:
                if not(tid in track_ids):
                    track_ids[tid] = {}

                track_ids[tid][str(frame_id+1)]={
                    "value":[
                        track['bbox'][0]-BASE_X,
                        track['bbox'][1]-BASE_Y,
                        track['bbox'][2]+track['bbox'][0]-BASE_X,
                        track['bbox'][3]+track['bbox'][1]-BASE_Y
                    ],
                    "autogenerated": False
                }
    
    new_frame = base_format
#    print(track_ids)

    annon = []
    for sid,v in subj_ids.items():        
        annon.append({
            "type": "bbox",
            "title": "worker_"+str(sid),
            "value": "worker_"+str(sid),
            "color": scolor(sid),
            "attributes": [],
            "points": v
            
    })
    print("Subj_ids: ", len(subj_ids))
#    for tid,v in track_ids.items():        
#        annon.append({
##            "type": "bbox",
 #           "title": "other_"+str(tid),
 #           "value": "other_"+str(tid),
 #           "color": scolor(tid),
 #           "attributes": [],
 #           "points": v
 #           
 #       })

    new_frame['annotations'] = annon

    return new_frame

def check_annotations(annon):
    titles = {}
#    print(len(anon))
    new_anon = []
    
    for a in annon:
        #print(a["title"], len(a["points"]))
        pts = a["points"]
        keys = list(pts.keys())
        if len(pts) < 20:
            print("Short:",a["title"], len(pts), keys[0],keys[-1])
            continue
        

        lastx  =int(keys[0])
        for k in keys:
            x = int(k)
            if (x-lastx) > 40:
                print("Gap:",a["title"], lastx, k)
            lastx= x
            if k not in pts:
                print("Key Error",a["title"], k)

        if a["title"] not in titles:
            titles[a["title"]]=f"{a['title']}, {len(pts)}, {keys[0]},{keys[-1]}"
        else:
#            print("Dup Title!",a["title"]) 
            print("Dup", titles[a["title"]])
            print("   ",a["title"], len(pts), keys[0],keys[-1])
        
        new_anon.append(a)
    
    return new_anon

if __name__ == '__main__':
#    workers = load_json_file("adjusted_tracking_result_2024-10-03_39600_43200_200_99_90_True_150_200_200_9990_10_True_90.json")
#    workers = load_json_file("modify_adjusted_tracking_result_2024-10-03_39600_43200_200_99_90_True_150_200_200_9985_10_True_90.json")
#    workers = load_json_file("correct_tracking_result_2024-10-03_39600_43200_200_99_90_True_150_200_200_9985_10_True_90.json")
    workers = load_json_file("1111correct_tracking_result_2024-10-03_39600_43200_200_99_90_True_150_200_200_9985_10_True_90.json")
    new_frame = convert_fastlabel(workers)

    new_frame_anon= check_annotations(new_frame['annotations'])
    new_frame['annotations'] = new_frame_anon

    with open('1111_fast_half_fastlabel_upload_with_subj.json', 'w') as f:
        json.dump([new_frame], f, indent=4)
